name: WeatherApp CI/CD

on:
  push:
    branches:
      - dev 
      - main
  workflow_dispatch:

env:
  IMAGE: ${{ secrets.DOCKER_HUB_USER }}/weatherapp
  AWS_REGION: ap-southeast-2
  CLUSTER_NAME: hieult-eks
  NAMESPACE: weather-app

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      
      - name: Decrypt .evn file
        run: |
          gpg --quiet --batch --yes --decrypt --passphrase="${{ secrets.ENV_PASSPHRASE }}" --output app/.env app/.env.gpg

      - name: Build and push Docker image
        run: |
          docker build -t $IMAGE:${{ github.sha }} -t $IMAGE:latest .
          docker push $IMAGE:${{ github.sha }}
          docker push $IMAGE:latest
      
  release:
    name: Tag release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: build
    if: github.ref == 'refs/heads/dev'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 
      - name: Setup Git
        run: |
          git config --global user.email "hieult262@gmail.com"
          git config --global user.name "hieult262"
          git remote set-url origin https://hieult262:${{ secrets.GIT_TOKEN }}@github.com/hieult262/weatherapp.git
          git fetch --tags
          git checkout main
          git merge origin/dev
          git push origin main

      - name: Tag new version
        run: |
          git fetch --prune --unshallow --tags || git fetch --tags
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "v1.0.0")
          VERSION=${LATEST_TAG#v}
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          PATCH=$((PATCH+1))
          NEW_TAG="v$MAJOR.$MINOR.$PATCH-$(date +%Y%m%d%H%M)"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          git tag $NEW_TAG
          git push origin $NEW_TAG
  


  deploy:
    name: Deploy to Kubernetes 
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Config AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Update kubeconfig for eks
        run: |
          aws eks --region $AWS_REGION update-kubeconfig --name $CLUSTER_NAME
      
      - name: Deploy to EKS with kubectl
        run: |
          kubectl set image deployment/weatherapp weather-app=$IMAGE:${{ github.sha }} -n $NAMESPACE
          kubectl rollout status deployment weatherapp -n $NAMESPACE
